---
import Layout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const PAGE_SIZE = 5;

const allPosts = await getCollection('blog');
allPosts.sort((a, b) => b.data.pubDate - a.data.pubDate);

const wordsPerMinute = 200;
const posts = allPosts.map(post => {
  const raw = post.body?.raw || '';
  const wordCount = raw.trim().split(/\s+/).length;
  const readingTime = Math.max(1, Math.ceil(wordCount / wordsPerMinute));
  return {
    slug: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    pubDate: post.data.pubDate instanceof Date ? post.data.pubDate.toISOString() : '',
    formattedDate: post.data.pubDate instanceof Date ? post.data.pubDate.toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' }) : '',
    readingTime,
    tags: post.data.tags || [],
  };
});
---

<Layout title="Blog – Rantique" description="Thoughtful writing on creativity, life, and everything in between.">
  <main class="max-w-4xl mx-auto px-6 py-16 space-y-12">

    <h1 class="text-4xl font-extrabold text-gray-900 dark:text-white mb-6">Blog Posts</h1>
    <p class="text-gray-600 dark:text-gray-400 mb-8">Thoughtful writing on creativity, life, and everything in between.</p>

    <!-- Search and Tag Filters -->
    <section x-data="blogIndex()" x-init="initPosts($refs.rawJson.textContent)" class="space-y-6">

      <input
        type="search"
        placeholder="Search posts..."
        class="w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-800 dark:text-white"
        x-model.debounce.300ms="query"
        aria-label="Search blog posts"
      />

      <!-- Tag Filters -->
      <div class="flex flex-wrap gap-2 mt-3">
        <template x-for="tag in uniqueTags()" :key="tag">
          <button
            :class="{'bg-purple-600 text-white': selectedTag === tag, 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300': selectedTag !== tag}"
            @click="toggleTag(tag)"
            class="px-3 py-1 rounded-md transition"
            x-text="tag"
            aria-pressed="false"
          ></button>
        </template>
        <button
          @click="clearTag()"
          class="px-3 py-1 rounded-md bg-red-500 text-white hover:bg-red-600 transition"
          x-show="selectedTag !== ''"
          aria-label="Clear tag filter"
        >Clear Filter</button>
      </div>

      <!-- Swipe Container & Nav -->
      <div class="relative">
        <!-- Left Arrow -->
        <button
          @click="scrollLeft()"
          class="absolute left-0 top-1/2 -translate-y-1/2 bg-gray-300 dark:bg-gray-700 rounded-full p-2 shadow-md z-10 hover:bg-gray-400 dark:hover:bg-gray-600"
          aria-label="Scroll left"
        >
          &#8592;
        </button>

        <!-- Scrollable list -->
        <ul
          x-ref="scrollContainer"
          class="flex space-x-6 overflow-x-auto no-scrollbar snap-x snap-mandatory scroll-smooth px-10 py-4"
          tabindex="0"
          role="list"
          aria-label="Blog posts"
        >
          <template x-for="post in paginatedPosts()" :key="post.slug">
            <li
              class="min-w-[280px] flex-shrink-0 border rounded-lg p-4 shadow-md dark:bg-[#1A1A2E] snap-start"
            >
              <a
                :href="`/blog/${post.slug}/`"
                class="text-xl font-semibold text-purple-700 dark:text-purple-400 hover:underline block"
                x-text="post.title"
              ></a>
              <p class="mt-2 text-gray-600 dark:text-gray-400 text-sm" x-text="post.description"></p>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                <span x-text="post.formattedDate"></span> · <span x-text="post.readingTime + ' min read'"></span>
              </p>
              <div class="mt-2 flex flex-wrap gap-2">
                <template x-for="tag in post.tags" :key="tag">
                  <span class="text-xs px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 cursor-default select-none">
                    #<span x-text="tag"></span>
                  </span>
                </template>
              </div>
            </li>
          </template>
        </ul>

        <!-- Right Arrow -->
        <button
          @click="scrollRight()"
          class="absolute right-0 top-1/2 -translate-y-1/2 bg-gray-300 dark:bg-gray-700 rounded-full p-2 shadow-md z-10 hover:bg-gray-400 dark:hover:bg-gray-600"
          aria-label="Scroll right"
        >
          &#8594;
        </button>
      </div>

      <p x-show="filteredPosts().length === 0" class="text-center text-gray-500 italic mt-8">No posts found.</p>

      <!-- Pagination -->
      <div class="flex justify-center gap-4 mt-8">
        <button
          @click="prevPage()"
          :disabled="currentPage === 1"
          class="px-4 py-2 rounded-md bg-gray-300 dark:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Prev
        </button>
        <span class="px-4 py-2 rounded-md bg-gray-200 dark:bg-gray-800 text-gray-700 dark:text-gray-300 font-semibold" x-text="currentPage"></span>
        <button
          @click="nextPage()"
          :disabled="currentPage === totalPages()"
          class="px-4 py-2 rounded-md bg-gray-300 dark:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Next
        </button>
      </div>
    </section>

    <!-- Alpine.js raw JSON for posts -->
    <script type="application/json" x-ref="rawJson" class="hidden">
      {JSON.stringify(posts)}
    </script>

    <script>
      function blogIndex() {
        return {
          query: '',
          selectedTag: '',
          currentPage: 1,
          pageSize: {PAGE_SIZE},
          posts: [],
          initPosts(json) {
            this.posts = JSON.parse(json);
          },
          uniqueTags() {
            return [...new Set(this.posts.flatMap(p => Array.isArray(p.tags) ? p.tags : []))].sort();
          },
          toggleTag(tag) {
            if (this.selectedTag === tag) this.selectedTag = '';
            else this.selectedTag = tag;
            this.currentPage = 1;
          },
          clearTag() {
            this.selectedTag = '';
            this.currentPage = 1;
          },
          filteredPosts() {
            const q = this.query.toLowerCase().trim();
            return this.posts.filter(p => {
              const inTitle = p.title.toLowerCase().includes(q);
              const inDesc = p.description.toLowerCase().includes(q);
              const matchesTag = this.selectedTag ? p.tags.includes(this.selectedTag) : true;
              return (inTitle || inDesc) && matchesTag;
            });
          },
          totalPages() {
            return Math.ceil(this.filteredPosts().length / this.pageSize);
          },
          paginatedPosts() {
            const start = (this.currentPage - 1) * this.pageSize;
            return this.filteredPosts().slice(start, start + this.pageSize);
          },
          scrollLeft() {
            this.$refs.scrollContainer.scrollBy({ left: -300, behavior: 'smooth' });
          },
          scrollRight() {
            this.$refs.scrollContainer.scrollBy({ left: 300, behavior: 'smooth' });
          },
          prevPage() {
            if (this.currentPage > 1) this.currentPage--;
          },
          nextPage() {
            if (this.currentPage < this.totalPages()) this.currentPage++;
          }
        };
      }
    </script>
  </main>
</Layout>
