---
import Layout from '../../layouts/BaseLayout.astro';
import { getCollection, getEntryBySlug } from 'astro:content';
import { AstroError } from 'astro/errors';
import Alert from '../../components/Alert.astro';

const { slug } = Astro.params;

// Get post
const post = await getEntryBySlug('blog', slug);
if (!post) throw new AstroError(`Post not found: ${slug}`);

// Render content and metadata
const { Content, data } = await post.render();

// Handle missing data
const pubDate = data?.pubDate instanceof Date ? data.pubDate : null;

// Reading time
const wordsPerMinute = 200;
const wordCount = data?.readingTimeWords ?? 0;
const readingTime = Math.max(1, Math.ceil(wordCount / wordsPerMinute));

// Format pubDate safely
const formattedDate = pubDate
  ? pubDate.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : 'Unknown Date';

// Static paths
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}
---

<Layout title={data?.title ?? "Untitled"} description={data?.description ?? ""}>

  <main class="prose prose-lg prose-neutral mx-auto py-12 px-4 max-w-3xl">

    <header class="mb-8">
      <h1 class="text-4xl font-extrabold">{data?.title ?? "Untitled"}</h1>
      <p class="text-gray-500 text-sm flex flex-wrap items-center gap-2 mt-1">
        <time datetime={pubDate?.toISOString() ?? undefined} aria-label={`Published on ${formattedDate}`}>
          Published on {formattedDate}
        </time>
        <span aria-hidden="true">&middot;</span>
        <span>{`~${readingTime} min read`}</span>
      </p>

      {data?.tags && data.tags.length > 0 && (
        <div class="mt-3 flex flex-wrap gap-2">
          {data.tags.map(tag => (
            <a
              href={`/tags/${tag.toLowerCase()}/`}
              class="inline-block bg-purple-100 text-purple-700 px-2 py-1 text-xs rounded hover:bg-purple-200 transition"
              aria-label={`Posts tagged with ${tag}`}
              >
              #{tag}
            </a>
          ))}
        </div>
      )}
    </header>

    <Content components={{ Alert }} />

    <button
      aria-label="Scroll to top"
      onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
      class="fixed bottom-8 right-8 p-3 rounded-full bg-purple-600 text-white shadow-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400 transition"
      title="Back to top"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7" />
      </svg>
    </button>

  </main>

</Layout>
