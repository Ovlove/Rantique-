---
import { getEntryBySlug, getCollection } from 'astro:content';
import { AstroError } from 'astro/errors';
import PostLayout from '../../layouts/PostLayout.astro';
import Alert from '../../components/Alert.astro';

const { slug } = Astro.params;

// Fetch the fiction post by slug
const post = await getEntryBySlug('fiction', slug);
if (!post) throw new AstroError(`Fiction post not found: ${slug}`);

// Render content component
const { Content } = await post.render();

// Use metadata from post.data
const data = post.data;

// Handle publication date
const pubDate = data?.date instanceof Date ? data.date : null;

// Reading time calculation based on word count in frontmatter or fallback to raw body
const wordsPerMinute = 200;
const wordCount = data?.readingTimeWords ?? (post.body?.raw?.trim().split(/\s+/).length || 0);
const readingTime = Math.max(1, Math.ceil(wordCount / wordsPerMinute));

// Format date safely
const formattedDate = pubDate
  ? pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
  : 'Unknown Date';

// Static paths for pre-rendering all fiction posts
export async function getStaticPaths() {
  const posts = await getCollection('fiction');
  return posts.map(post => ({
    params: { slug: post.slug },
  }));
}
---

<PostLayout
  title={data?.title ?? 'Untitled'}
  description={data?.description ?? ''}
  pubDate={pubDate}
  tags={data?.tags || []}
  subtitle={data?.subtitle}
  contentType="fiction"
  readingTime={readingTime}
  formattedDate={formattedDate}
>
  <Content components={{ Alert }} />
</PostLayout>
