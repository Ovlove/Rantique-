---
import Layout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const PAGE_SIZE = 5;

const allPosts = await getCollection('fiction');
allPosts.sort((a, b) => b.data.pubDate - a.data.pubDate);

const wordsPerMinute = 200;
const posts = allPosts.map(post => {
  const raw = post.body?.raw || '';
  const wordCount = raw.trim().split(/\s+/).length;
  const readingTime = Math.max(1, Math.ceil(wordCount / wordsPerMinute));
  return {
    slug: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    pubDate: post.data.pubDate instanceof Date ? post.data.pubDate.toISOString() : '',
    formattedDate: post.data.pubDate instanceof Date ? post.data.pubDate.toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' }) : '',
    readingTime,
    tags: post.data.tags || [],
  };
});
---

<style>
  /* Hide scrollbar but keep scroll functionality */
  .no-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  .no-scrollbar::-webkit-scrollbar {
    display: none;  /* Chrome, Safari, Opera */
  }
</style>

<Layout title="Fiction – Rantique" description="Stories that echo, haunt, and stir your imagination.">
  <main class="max-w-4xl mx-auto px-6 py-16 space-y-12">

    <h1 class="text-4xl font-extrabold text-gray-900 dark:text-white mb-6">Fiction Stories</h1>
    <p class="text-gray-600 dark:text-gray-400 mb-8">Stories that echo, haunt, and stir your imagination.</p>

    <section
      x-data="fictionIndex()"
      x-init="initPosts($refs.rawJson.textContent)"
      class="space-y-6"
    >

      <input
        type="search"
        placeholder="Search fiction..."
        class="w-full px-4 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 dark:bg-gray-800 dark:text-white"
        x-model.debounce.300ms="query"
        aria-label="Search fiction stories"
      />

      <!-- Tag Filters -->
      <div class="flex flex-wrap gap-2 mt-3">
        <template x-for="tag in uniqueTags" :key="tag">
          <button
            :class="{'bg-purple-600 text-white': selectedTag === tag, 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300': selectedTag !== tag}"
            @click="toggleTag(tag)"
            class="px-3 py-1 rounded-md transition"
            x-text="tag"
            aria-pressed="false"
          ></button>
        </template>
        <button
          @click="clearTag()"
          class="px-3 py-1 rounded-md bg-red-500 text-white hover:bg-red-600 transition"
          x-show="selectedTag !== ''"
          aria-label="Clear tag filter"
        >Clear Filter</button>
      </div>

      <!-- Swipe container -->
      <div class="relative mt-8">
        <button
          @click="scrollPrev()"
          class="absolute left-0 top-1/2 -translate-y-1/2 bg-purple-600 text-white rounded-full p-2 shadow-md hover:bg-purple-700 z-10"
          aria-label="Scroll left"
          :disabled="scrollAtStart"
          :class="{'opacity-50 cursor-not-allowed': scrollAtStart}"
        >
          ‹
        </button>

        <button
          @click="scrollNext()"
          class="absolute right-0 top-1/2 -translate-y-1/2 bg-purple-600 text-white rounded-full p-2 shadow-md hover:bg-purple-700 z-10"
          aria-label="Scroll right"
          :disabled="scrollAtEnd"
          :class="{'opacity-50 cursor-not-allowed': scrollAtEnd}"
        >
          ›
        </button>

        <ul
          x-ref="scrollContainer"
          class="flex overflow-x-auto snap-x snap-mandatory gap-6 no-scrollbar scroll-smooth px-12"
          @scroll.debounce="handleScroll"
          tabindex="0"
          aria-label="Swipe through fiction stories"
        >
          <template x-for="post in filteredPosts()" :key="post.slug">
            <li
              class="min-w-[280px] max-w-[280px] snap-start bg-gray-50 dark:bg-[#1A1A2E] rounded-lg p-4 shadow hover:shadow-lg transition-shadow cursor-pointer"
              tabindex="0"
              @keydown.enter.window="window.location.href = `/fiction/${post.slug}/`"
            >
              <a
                :href="`/fiction/${post.slug}/`"
                class="block font-semibold text-purple-700 dark:text-purple-400 hover:underline text-lg mb-2"
                x-text="post.title"
              ></a>
              <p class="text-gray-600 dark:text-gray-400 text-sm mb-2" x-text="post.description"></p>
              <p class="text-xs text-gray-500 dark:text-gray-400">
                <span x-text="post.formattedDate"></span> · <span x-text="post.readingTime + ' min read'"></span>
              </p>
              <div class="mt-2 flex flex-wrap gap-2">
                <template x-for="tag in post.tags" :key="tag">
                  <span class="text-xs px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 cursor-default select-none">#<span x-text="tag"></span></span>
                </template>
              </div>
            </li>
          </template>
        </ul>
      </div>

      <p
        x-show="filteredPosts().length === 0"
        class="text-center text-gray-500 italic mt-8"
      >No stories found.</p>

    </section>

    <!-- Alpine.js raw JSON for posts -->
    <script type="application/json" x-ref="rawJson" class="hidden">
      {JSON.stringify(posts)}
    </script>

    <script>
      function fictionIndex() {
        return {
          query: '',
          selectedTag: '',
          posts: [],
          scrollAtStart: true,
          scrollAtEnd: false,

          initPosts(json) {
            this.posts = JSON.parse(json);
            this.$nextTick(() => this.handleScroll());
          },

          uniqueTags() {
            return [...new Set(this.posts.flatMap(p => Array.isArray(p.tags) ? p.tags : []))].sort();
          },

          toggleTag(tag) {
            if (this.selectedTag === tag) this.selectedTag = '';
            else this.selectedTag = tag;
          },

          clearTag() {
            this.selectedTag = '';
          },

          filteredPosts() {
            const q = this.query.toLowerCase().trim();
            return this.posts.filter(p => {
              const inTitle = p.title.toLowerCase().includes(q);
              const inDesc = p.description.toLowerCase().includes(q);
              const matchesTag = this.selectedTag ? p.tags.includes(this.selectedTag) : true;
              return (inTitle || inDesc) && matchesTag;
            });
          },

          scrollPrev() {
            const container = this.$refs.scrollContainer;
            container.scrollBy({ left: -300, behavior: 'smooth' });
            setTimeout(() => this.handleScroll(), 300);
          },

          scrollNext() {
            const container = this.$refs.scrollContainer;
            container.scrollBy({ left: 300, behavior: 'smooth' });
            setTimeout(() => this.handleScroll(), 300);
          },

          handleScroll() {
            const container = this.$refs.scrollContainer;
            this.scrollAtStart = container.scrollLeft <= 0;
            this.scrollAtEnd = container.scrollLeft + container.clientWidth >= container.scrollWidth - 1;
          },
        };
      }
    </script>

  </main>
</Layout>
