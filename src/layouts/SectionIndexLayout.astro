---
import SectionItem from '~/layouts/SectionItem.astro'; // ✅ Correct import
import type { CollectionEntry } from 'astro:content';

const { title, description, posts, pageSize = 10 } = Astro.props;

const serializedPosts = JSON.stringify(
  posts.map((post) => ({
    title: post.data.title ?? '',
    description: post.data.description ?? '',
    slug: post.slug, // ✅ pubDate removed
    tags: post.data.tags ?? [],
  }))
);
---

<section class="section">
  <div class="container">
    <h1 class="section__title">{title}</h1>
    {description && <p class="section__description">{description}</p>}

    <div 
      x-data="sectionList()" 
      x-init={`initPosts('${serializedPosts}')`} 
      class="section__controls"
    >
      <input 
        x-model="query" 
        type="text" 
        placeholder="Search posts..." 
        class="search-box"
      />

      <div class="tags">
        <template x-for="tag in uniqueTags" :key="tag">
          <button 
            :class="{'active': selectedTag === tag}" 
            @click="toggleTag(tag)"
            x-text="tag"
          ></button>
        </template>
      </div>

      <div class="posts-list">
        <template x-for="(post, index) in filteredPosts()" :key="post.slug">
          <div x-show="showPage(index)">
            <SectionItem
              title={post.title}
              description={post.description}
              slug={post.slug}
              tags={post.tags}
            />
          </div>
        </template>
      </div>

      <!-- Pagination Controls -->
      <div class="pagination" x-show="totalPages() > 1">
        <button @click="currentPage = Math.max(currentPage - 1, 1)" :disabled="currentPage === 1">Prev</button>
        <span x-text="currentPage"></span>
        <button @click="currentPage = Math.min(currentPage + 1, totalPages())" :disabled="currentPage === totalPages()">Next</button>
      </div>
    </div>
  </div>
</section>

<script>
  function sectionList() {
    return {
      query: '',
      selectedTag: '',
      currentPage: 1,
      pageSize: {{ pageSize }},
      posts: [],
      initPosts(json) {
        this.posts = JSON.parse(json);
      },
      get uniqueTags() {
        return [...new Set(this.posts.flatMap(p => Array.isArray(p.tags) ? p.tags : []))].sort();
      },
      toggleTag(tag) {
        this.selectedTag = this.selectedTag === tag ? '' : tag;
      },
      filteredPosts() {
        const q = this.query.toLowerCase();
        return this.posts.filter(p => {
          const title = typeof p.title === 'string' ? p.title.toLowerCase() : '';
          const description = typeof p.description === 'string' ? p.description.toLowerCase() : '';
          const tags = Array.isArray(p.tags) ? p.tags : [];

          const textMatch = title.includes(q) || description.includes(q);
          const tagMatch = this.selectedTag ? tags.includes(this.selectedTag) : true;

          return textMatch && tagMatch;
        });
      },
      totalPages() {
        return Math.ceil(this.filteredPosts().length / this.pageSize);
      },
      showPage(index) {
        const start = (this.currentPage - 1) * this.pageSize;
        return index >= start && index < start + this.pageSize;
      }
    };
  }
</script>

<style>
  .search-box {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
  }

  .tags button {
    margin: 0.25rem;
    padding: 0.3rem 0.6rem;
    border: none;
    background: #eee;
    cursor: pointer;
  }

  .tags .active {
    background: #333;
    color: #fff;
  }

  .pagination {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
    align-items: center;
  }
</style>
