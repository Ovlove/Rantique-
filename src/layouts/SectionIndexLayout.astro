---
import SectionItem from '../components/SectionItem.astro';

const {
  title = 'Untitled Section',
  description = '',
  posts = [],
  pageSize = 10
} = Astro.props;

// Serialize posts safely for Alpine.js
const serializedPosts = JSON.stringify(
  posts.map(post => ({
    title: post?.title ?? '(No title)',
    description: post?.description ?? '',
    slug: post?.slug ?? '',
    tags: Array.isArray(post?.tags) ? post.tags : [],
  }))
).replace(/</g, '\\u003c');
---

<section class="section py-12">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <header class="mb-8 text-center">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100">{title}</h1>
      {description && (
        <p class="mt-2 text-gray-600 dark:text-gray-300">{description}</p>
      )}
    </header>

    <div
      x-data="sectionList({ pageSize: +`${pageSize}` })"
      x-init={`initPosts('${serializedPosts}')`}
      role="region"
      aria-label="Posts listing"
      class="space-y-6"
    >
      <!-- Search -->
      <input
        x-model.debounce.300ms="query"
        type="search"
        placeholder="Search posts..."
        aria-label="Search posts"
        class="w-full px-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-[#1A1A2E] text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#7F5AF0] focus:ring-offset-1 transition"
      />

      <!-- Tag filter -->
      <nav
        class="flex flex-wrap gap-2"
        aria-label="Filter posts by tag"
      >
        <template x-for="tag in uniqueTags" :key="tag">
          <button
            type="button"
            :class="{
              'bg-[#7F5AF0] text-white': selectedTag === tag,
              'bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600': selectedTag !== tag
            }"
            @click="toggleTag(tag)"
            x-text="tag"
            class="px-3 py-1 rounded-md text-sm font-medium transition focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[#7F5AF0]"
          ></button>
        </template>
      </nav>

      <!-- Posts list -->
      <section class="space-y-8" aria-live="polite" aria-relevant="additions removals">
        <template x-for="(post, index) in filteredPosts()" :key="post.slug || index">
          <article
            x-show="showPage(index)"
            x-transition
            class="rounded-md border border-gray-300 dark:border-gray-700 p-4 bg-white dark:bg-[#111122] shadow-sm"
            tabindex="0"
          >
            <SectionItem
              x-bind:title="post.title"
              x-bind:description="post.description"
              x-bind:slug="post.slug"
              x-bind:tags="post.tags"
            />
          </article>
        </template>

        <template x-if="filteredPosts().length === 0">
          <p class="text-center text-gray-500 dark:text-gray-400">No posts found.</p>
        </template>
      </section>

      <!-- Pagination -->
      <nav
        class="flex justify-center items-center gap-4 mt-6"
        aria-label="Pagination"
        x-show="totalPages() > 1"
      >
        <button
          @click="changePage(currentPage - 1)"
          :disabled="currentPage === 1"
          class="px-4 py-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#7F5AF0] hover:text-white transition focus:outline-none focus:ring-2 focus:ring-[#7F5AF0]"
        >
          Prev
        </button>

        <span
          class="text-gray-900 dark:text-gray-100 font-semibold"
          x-text="`Page ${currentPage} of ${totalPages()}`"
        ></span>

        <button
          @click="changePage(currentPage + 1)"
          :disabled="currentPage === totalPages()"
          class="px-4 py-2 rounded-md bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#7F5AF0] hover:text-white transition focus:outline-none focus:ring-2 focus:ring-[#7F5AF0]"
        >
          Next
        </button>
      </nav>
    </div>
  </div>
</section>

<script>
  function sectionList({ pageSize = 10 }) {
    return {
      query: '',
      selectedTag: '',
      currentPage: 1,
      pageSize,
      posts: [],

      initPosts(json) {
        try {
          this.posts = JSON.parse(json);
        } catch {
          this.posts = [];
        }
      },

      get uniqueTags() {
        return [...new Set(this.posts.flatMap(p => Array.isArray(p.tags) ? p.tags : []))].sort();
      },

      toggleTag(tag) {
        this.selectedTag = this.selectedTag === tag ? '' : tag;
        this.currentPage = 1;
      },

      filteredPosts() {
        const q = this.query.toLowerCase().trim();
        return this.posts.filter(p => {
          const title = p.title?.toLowerCase() || '';
          const description = p.description?.toLowerCase() || '';
          const tags = Array.isArray(p.tags) ? p.tags : [];

          const textMatch = title.includes(q) || description.includes(q);
          const tagMatch = this.selectedTag ? tags.includes(this.selectedTag) : true;

          return textMatch && tagMatch;
        });
      },

      totalPages() {
        return Math.ceil(this.filteredPosts().length / this.pageSize) || 1;
      },

      showPage(index) {
        const start = (this.currentPage - 1) * this.pageSize;
        return index >= start && index < start + this.pageSize;
      },

      changePage(newPage) {
        if (newPage >= 1 && newPage <= this.totalPages()) {
          this.currentPage = newPage;
          // Optionally scroll to top on page change:
          // window.scrollTo({ top: 0, behavior: 'smooth' });
        }
      },
    };
  }
</script>
